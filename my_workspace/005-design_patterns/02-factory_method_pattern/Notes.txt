1. The factory method pattern deals with the problem of creating objects without specifying the exact class of the object.

For example look at the load and instance methods, in particular the way that the returned address_type_id specifies the name of the class to be created in the method getInstance.

Let's improve the getInstance to throw an exception if the program attempts to create an instance that doesn't exist.
First, create a new constant with an error code. 

const ADDRESS_ERROR_UNKNOWN_SUBCLASS = 1001;

final public static function getInstance($address_type_id, $data=[]) {
	$class_name = 'Address'. self::$valid_address_types[$address_type_id];
	if(!class_exists($class_name)) {
	  throw new ExceptionAddress('Address subclass not found, cannot create', self::ADDRESS_ERROR_UNKNOWN_SUBCLASS);
	}
	return new $class_name($data);
}


echo '<h2>Factory method pattern</h2>';
$my_address = Address::getInstance(Address::ADDRESS_TYPE_RESIDENCE);
$my_address->street_address_1 = 'Chemin de Fer';
$my_address->street_address_2 = 'Deauville';
$my_address->city_name = 'Toulouse';
$my_address->subdivision_name = 'Hautes-Garonnes';
$my_address->country_name = 'France';
$my_address->postal_code = '32895';
var_dump($my_address);

Everything looks the same.





